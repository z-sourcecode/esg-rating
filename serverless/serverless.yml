service: esg
app: esg-rating

frameworkVersion: '3'
provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  http_options_handler:
    handler: esg_handler.cors_headers
    events:
      - http:
          path: /
          method: options
          cors: true
  hello:
    handler: esg_handler.hello
    events:
      - http:
          path: /
          method: get
          cors: true
  get_rating_by_params:
    handler: esg_handler.get_rating_by_params
    events:
      - http:
          path: /get_rating_by_params
          method: post
          cors: true
  get_rating_by_security:
    handler: esg_handler.get_rating_by_security
    events:
      - http:
          path: /get_rating_by_security
          method: post
          cors: true
  get_muni_data:
    handler: esg_handler.get_muni_data
    events:
      - http:
          path: /get_muni_data
          method: post
          cors: true
  add_record:
    handler: esg_handler.add_record
    events:
      - http:
          path: /add_record
          method: post
          cors: true
  get_record:
    handler: esg_handler.get_record
    events:
      - http:
          path: /get_record
          method: post
          cors: true
  scan_table:
    handler: esg_handler.scan_table
    events:
      - http:
          path: /scan_table
          method: post
          cors: true
  esg_rating:
    handler: esg_handler.esg_rating
    events:
      - http:
          path: /esg
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-simulate
  - serverless-dynamodb-local

custom:
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 4000
  demographicsTableName: demographics
  raceTableName: race
  droughtTableName: drought
  fireTableName: fire
  configurationsTableName: configurations
  pythonRequirements:
    dockerizePip: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
    migration:
      dir: offline/migrations
    seed:
      domain:
        sources:
          - table: ${self:custom.configurationsTableName}
            sources: [./data/configuration.json]
          - table: ${self:custom.demographicsTableName}
            sources: [./data/demographics.json]
          - table: ${self:custom.raceTableName}
            sources: [./data/race.json]
          - table: ${self:custom.droughtTableName}
            sources: [./data/drought.json]
          - table: ${self:custom.fireTableName}
            sources: [./data/wildfire.json]
# you can add CloudFormation resource templates here
resources:
    Resources:
        Demographics:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.demographicsTableName}
                AttributeDefinitions:
                    - AttributeName: GeoID
                      AttributeType: S
                KeySchema:
                    - AttributeName: GeoID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        Race:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.raceTableName}
                AttributeDefinitions:
                    - AttributeName: GeoID
                      AttributeType: S
                KeySchema:
                    - AttributeName: GeoID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        Drought:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.droughtTableName}
                AttributeDefinitions:
                    - AttributeName: GeoID
                      AttributeType: S
                KeySchema:
                    - AttributeName: GeoID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        Fire:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.fireTableName}
                AttributeDefinitions:
                    - AttributeName: GeoID
                      AttributeType: S
                KeySchema:
                    - AttributeName: GeoID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        Configurations:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.configurationsTableName}
                AttributeDefinitions:
                    - AttributeName: ConfigID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ConfigID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
